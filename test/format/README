Tracing format operations can be useful in debugging.

Turn on tracing with the "-t" flag:

    -t	Trace operations into a WiredTiger log

That causes format to write trace messages into a WiredTiger log, using WT_SESSION.log_printf()
to track operations.  Operations are logged into a separate database from the run, "OPS.TRACE"
in the run's home directory.

By default only modifications and transactions are traced to limit how much data is stored. The
-t option takes an argument, so to configure the default use an empty string, '-t ""'.

You can trace more operations by adding comma or white-space separated arguments to the -t option:

    all         trace everything
    bulk        trace bulk loads
    cursor      trace cursor operations
    mirror_fail	trace multiple failures in mirror checks (up to a maximum of 20).
    read        trace read operations
    retain=N    log files are retained by default, retain N instead.
    timestamp   trace timestamp operations (setting oldest, stable TS)
    txn         add transactional information to the trace log on operations

For example, to trace the usual operations plus bulk load, and retain 25 log files, use:

    -t "bulk,retain=25"

Additionally if tracing is configured, verbose messages written by the database itself will be
logged as well. For example, to trace the usual operations and include verbose block manager
operations, use:

    -C 'verbose=(block)' -t ""

After the run, you can dump the trace records from the WiredTiger log files with the wt utility,
for example:

    wt -h RUNDIR/OPS.TRACE printlog -um

The output will look something like this:

    [1636905807:928201][18388:0x7f91957fa700], t: begin snapshot read-ts=36417 (repeatable)
    [1636905807:928462][18388:0x7f9195ffb700], t: begin snapshot read-ts=36417 (repeatable)
    [1636905807:928469][18388:0x7f91957fa700], t: begin snapshot read-ts=36417 (repeatable)
    [1636905807:928701][18388:0x7f9195ffb700], t: commit read-ts=36417, commit-ts=36436
    [1636905807:929279][18388:0x7f91957fa700], t: commit read-ts=36417, commit-ts=36448
    [1636905810:936417][18388:0x7f918f7fe700], t: commit read-ts=48394, commit-ts=48400
    [1636905811:364172][18388:0x7f918f7fe700], t: table:T00005 update 82644 {0000082644.00/opqrstuvwxyzabcdefghi}, {0000082644/wMNOPQRSTUVW}
    [1636905812:836417][18388:0x7f9194ff9700], t: table:T00002 remove 12940
    [1636905813:736417][18388:0x7f9194ff9700], t: table:T00002 insert 7105 {0000007105.02/opqrstuvwxyza}, {0000007105/yMNOPQRS}
    [1636905817:364173][18388:0x7f91957fa700], t: abort read-ts=75859
    [1636905818:936417][18388:0x7f9195ffb700], t: begin snapshot read-ts=82671 (repeatable)
    [1636905822:36417][18388:0x7f9194ff9700], t: begin snapshot read-ts=97401 (not repeatable)
    [1636905822:364170][18388:0x7f918f7fe700], t: table:T00007 insert 130589 {0000130589.08/opqrstuvwx}, {0000021495/gMNOPQRSTU}
    [1636905822:364177][18388:0x7f918f7fe700], t: table:T00008 insert 130589 {0000130589.13/opqrstuvwxyza}, {0000021495/gMNOPQRSTU}
    [1636905824:936417][18388:0x7f9194ff9700], t: table:T00007 insert 134463 {0000134463.02/opqrstuvwxyzabc}, {0000072829/}
    [1636905826:128998][18388:0x7f9194ff9700], t: table:T00004 insert 136417 {DUPLICATEV/LMNOPQRST}
    [1636905826:936417][18388:0x7f918f7fe700], t: table:T00005 remove 1441
    [1636905830:364176][18388:0x7f9195ffb700], t: table:T00005 insert 142810 {0000142810.08/opqrstuvwxyzabcde}, {0000065596/xMNOPQRSTUVW}
    [1636905830:619754][18388:0x7f91957fa700], t: begin snapshot read-ts=136417 (not repeatable)
    [1636905830:620971][18388:0x7f91957fa700], t: commit read-ts=136417, commit-ts=136421
    [1636905831:236417][18388:0x7f918f7fe700], t: begin snapshot read-ts=139290 (not repeatable)

The fields are a timestamp, a thread and session ID, the program name and then an operation. When
the operation is per object (like and update or remove), there's an object name and a row number.

When format detects a mismatch in the row that's about to be returned and the row the read
expected, it will dump the cursor page that was the source of the row that didn't match the
expected value, as well as the history store. The dumps are in format's run directory, in files
named "FAIL.pagedump" and "FAIL.HSdump". Alternatively, if you have a debugger attached to the
failure, you can dump the underlying Btree pages the cursor references, using either a WT_CURSOR
or WT_CURSOR_BTREE cursor:

    (gdb) print __wt_debug_cursor_page(cursor, "/tmp/XX")
