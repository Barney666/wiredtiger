notes: __wt_verbose_worker just uses whatever is manually set as the level
for that category, so i'm ignoring those.

a lot of stuff assumes only one debug level, e.g. in block_compact:
if (LEVEL_ISSET(DEBUG_1))
  some_logging_function();

some_logging_function() {
   // various other expensive ops
   log_stuff(DEBUG_1);
}

given that we now probably want __wt_verbose_debugX replacing the single
__wt_verbose_debug, this might have warranted a technical design to consider
the above two issues.

block_vrfy: assuming that these are called infrequently/in bad situations,
so i'm leaving them as DEBUG_1.

block manager: i'm assuming that opening files, creating and tearing down
block caches are relatively uncommon.

btree: assuming that stuff used in bt_vrfy and bt_slvg are reasonably
uncommon. also assuming that opening a btree isn't anywhere near the hot
path. the split code does log stuff for every split, but it's a single line
- going to leave it. bt_sync's per-page operations moved to debug2, but i
think leaving the per-file stuff as debug1 is ok?

conn: leaving the debug_info method, presumably that only gets called by our
users. cache pool: made the per-entry stuff debug2. conn_log:
removal/truncation seems to be doing the most logging, and that doesn't seem
common? conn_tiered: removing local objects seems like it'd be common
enough.

cur_backup: adding IDs seems like it'd be common enough, not too sure
though.

evict: assuming the teardown/setup bits are relatively uncommon.

HS: we probably want the per-ckpy cache stats? and the "fixing existing
updates message".

log: assuming that opening/renaming/removing a file isn't super frequent.

LSM: assuming tree switches uncommon, flushes and chunk checkpoints common.

meta: some stuff logs with the checkpoint progress module, i don't think
this should be changed since it's not the same as the checkpoint module so
can be left at INFO separately.

os: assumed file reads/writes are more common than open/close

reconcile: assuming that overflow records are reasonably frequently
modified/used. rec_write: assuming dumping keys is appropriate at a higher
debug level than seeing which pages were reconciled.

schema: assuming there could be many more objects than tables.

tiered: assuming object creation more common than schemas or tiers

txn: assuming that stuff that happens once per checkpoint is reasonably
ok. also assuming RTS isn't something where we're sensitive about extra
logging...
